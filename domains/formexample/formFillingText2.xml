<?xml version="1.0" encoding="UTF-8"?>
<domain>

	<!-- Initial state of the interaction -->
	<initialstate>
	
		<!-- Starts the dialogue with the system prompt -->
		<variable id="a_m">
			<value>Start</value>
		</variable>

		<!-- complete list of slots to fill -->
		<variable id="Slots">
			<value>[Person,Location,StartDate,EndDate]</value>
		</variable>
		
		<!-- List of optional slots (that may be left unfilled) -->
		<variable id="optional">
			<value prob="1">[]</value>
		</variable>

		<!-- List of precedence relations between slots -->
		<variable id="precedence">
			<value>[]</value>
		</variable>
		
		<!-- List of mutually exclusive slots -->
		<variable id="exclusive">
			<value>[]</value>
		</variable>
		 
	</initialstate>


	<!-- Fills the form slots according to the values produced by the 
		statistical NLU engine -->
	<model trigger="a_u">

		<!-- Fills the location slot (either when the slot is not filled yet, or the utterance 
		contains a 'no', usually to correct a previous misunderstanding) -->
		<rule>
			<case>
				<condition>
					<if var="a_u" relation="contains" value="({Entity},builtin.geography.*)" />
					<or>
						<if var="toground" relation="contains" value="Location" />					
						<if var="u_u" relation="contains" value="no" />
					</or>

				</condition>
				<effect prob="1">
					<set var="Location" value="{Entity}" />
					<set var="newinputs" value="Location" exclusive="false"/>
				</effect>
			</case>
		</rule>

		<!-- Fills the people slot -->
		<rule>
			<case>
				<condition>
					<if var="a_u" relation="contains"
						value="({Entity},builtin.encyclopedia.people.*)" />
					<or>
						<if var="toground" relation="contains" value="Person" />					
						<if var="u_u" relation="contains" value="no" />
					</or>
				</condition>
				<effect prob="1">
					<set var="Person" value="{Entity}" />
					<set var="newinputs" value="Person" exclusive="false"/>
				</effect>
			</case>
		</rule>

		<!-- Fills the date slot -->
		<rule>
			<case>
				<condition>
					<if var="a_u" relation="contains" value="({Entity},builtin.datetime.*)" />
					<or>
						<if var="toground" relation="contains" value="StartDate" />					
						<if var="u_u" relation="contains" value="no" />
					</or>
				</condition>
				<effect prob="1">
					<set var="StartDate" value="{Entity}" />
					<set var="newinputs" value="StartDate" exclusive="false"/>
				</effect>
			</case>
		</rule>


		<!-- Fills the date slot -->
		<rule>
			<case>
				<condition>
					<if var="a_u" relation="contains" value="({Entity},builtin.datetime.*)" />
					<or>
						<if var="toground" relation="contains" value="EndDate" />					
						<if var="u_u" relation="contains" value="no" />
					</or>
				</condition>
				<effect prob="1">
					<set var="EndDate" value="{Entity}" />
					<set var="newinputs" value="EndDate" exclusive="false"/>
				</effect>
			</case>
		</rule>
		
		<!-- Accumulates evidence about the slot values -->
		<rule priority="2">
			<case>
				<condition>
					<if var="Slot" relation="in" value="{toground}" />
					<if var="{Slot}" relation="=" value="{SlotValue}" />
				</condition>
				<effect prob="1">
					<set var="{Slot}" value="{SlotValue}" />
				</effect>
			</case>
		</rule>
	
		<!-- Handles the user responses following a clarification question -->
		<rule>
			<case>
				<condition>
					<if var="a_m" relation="=" value="AskConfirm({Slot},{SlotValue})" />
					<if var="u_u" relation="contains" value="(yes|correct|exactly)" />
				</condition>
				<effect prob="1">
					<set var="{Slot}" value="{SlotValue}" />
					<set var="newinputs" value="{Slot}"/>
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="AskConfirm({Slot},{SlotValue})" />
					<if var="u_u" relation="contains" value="no" />
				</condition>
				<effect prob="1">
					<set var="{Slot}" value="None" />
				</effect>
			</case>
		</rule>
		
		<!-- Dummy rule to trigger the update of 'newinputs' -->
		<rule priority="2">
			<case>
				<effect>
					<set var="newinputs" value="None"/>
				</effect>
			</case>
		</rule>
	
		
	</model>

 
	<!-- Action selection model (essentially grounding or clarify the slots?) -->
	<model trigger="newinputs">


		<!-- Relative utilities for grounding vs . requesting a confirmation for a slot -->
		<rule>
			<case>
				<condition>
					<if var="newinputs" relation="contains" value="{S1}" />
					<if var="{S1}" relation="=" value="{S1V}"/>
					<if var="S1V" relation="!=" value="None" />
				</condition>
				<effect util="2">
					<set var="a_m" value="Ground({S1},{S1V})" />
				</effect>
				<effect util="1">
					<set var="a_m" value="AskConfirm({S1},{S1V})" />
				</effect>
			</case>
			<case>
				<condition> 
					<if var="S1V" relation="!=" value="None" />
				</condition>
				<effect util="-2">
					<set var="a_m" value="Ground({S1},{S1V})" />
				</effect>
				<effect util="-0.2">
					<set var="a_m" value="AskConfirm({S1},{S1V})" />
				</effect>			
			</case>
		</rule>
		
		<!-- Utilities for skipping an optional slot -->
		<rule>
			<case>
				<condition>
					<if var="u_u" relation="contains" value="skip"/>
					<if var="FocusSlot" relation="=" value="{Slot}"/>
					<if var="optional" relation="contains" value="{Slot}"/>
				</condition>
				<effect util="1">
					<set var="a_m" value="Skip({Slot})"/>
				</effect>
			</case>
			<case>
				<effect util="-1">
					<set var="a_m" value="Skip(*)"/>
				</effect>
			</case>
		</rule>

		<!-- Utilities for restarting the interaction -->
		<rule>		
			<case>
				<condition>
					<if var="u_u" relation="contains" value="restart"/>
				</condition>
				<effect util="1.0">
					<set var="a_m" value="Start" />
				</effect>
			</case>	
			<case>
				<effect util="-2">
					<set var="a_m" value="Start"/>
				</effect>
			</case>		
		</rule>
		
		<!-- Handles an utterance that was not understood -->
			<rule>
			<case>
				<condition>
					<if var="a_u" value="None" />
					<if var="u_u" relation="!=" value="None"/>
					<if var="u_u" relation="!contains" value="(yes|correct|exactly|no)"/>
				</condition>
				<effect util="0.5">
					<set var="a_m" value="NotUnderstood" />
				</effect>
			</case>
			<case>
				<effect util="-0.2">
					<set var="a_m" value="NotUnderstood" />
				</effect>
			</case>
		</rule>
		
	</model>

	<!-- Generation model from system actions to the raw utterances -->
	<model trigger="a_m">

		<rule>
			<case>
				<condition>
					<if var="a_m" relation="=" value="Start"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="Welcome! Please provide the values for the following fields: 
					the person, the location, and the date. You can restart the interaction at any time by saying 'restart'." />
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" value="Ground({Slot},{SlotValue})" />	
					<if var="u_m" relation="!=" value="OK,*"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="OK, the {Slot} is {SlotValue}." />
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" value="Ground({Slot},{SlotValue})" />	
				</condition>
				<effect util="1">
					<set var="u_m" value="and the {Slot} is {SlotValue}." />
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="AskConfirm({Slot},{SlotValue})" />
				</condition>
				<effect util="1">
					<set var="u_m"
						value="I think you said that the {Slot} is {SlotValue}. Is that correct?" />
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="NotUnderstood" />
					<if var="u_m" relation="contains" value="repeat?"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="I'm sorry, I did not understand that." />
					<set var="toground" value="{toground}"/>
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="NotUnderstood" />
				</condition>
				<effect util="1">
					<set var="u_m" value="I am not sure what you just said. Could you repeat?" />
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="AskOpt({Slot})" />
				</condition>
				<effect util="1">
					<set var="u_m" value="Please specify the {Slot}, or say 'skip' to ignore the field." />
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="Ask({Slot})" />
				</condition> 
				<effect util="1">
					<set var="u_m" value="Please specify the {Slot}." />
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="SummariseResults" />	
				</condition>
				<effect util="1">
					<set var="u_m" value="Here are the values filled for the form:" />
					<set var="a_m" value="{Slots}"/>
				</effect>
			</case>
		</rule>
		
		<!-- Rule for the final (recursive) enumeration of filled values -->
		<rule>
			<case>
				<condition>
					<if var="a_m" relation="=" value="[{S}, {R}]"/>
					<if var="S" relation="in" value="{Slots}"/>
					<if var="{S}" relation="=" value="{SlotValue}"/>
					<if var="SlotValue" relation="!=" value="None"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="The {S} is {SlotValue}"/>
					<set var="a_m" value="[{R}]"/>
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="[{S}]" />
					<if var="S" relation="in" value="{Slots}"/>	
					<if var="{S}" relation="=" value="{SlotValue}"/>
					<if var="SlotValue" relation="!=" value="None"/>
				</condition>
				<effect util="1">
					<set var="u_m" value="And the {S} is {SlotValue}. Thank you for your input!" />
				</effect>
			</case>
		</rule>

	</model>
	
	
	<!-- Transition model (following a new system action). -->
	<model trigger="a_m,toground" blocking="true">
		
		<!-- Removing the grounded/skipped value from the 'toground' variable -->
		<rule>
			<case>
				<condition>
					<if var="a_m" relation="=" value="Ground({Slot},*)" />
					<if var="toground" relation="contains" value="{Slot}"/>
				</condition>
				<effect prob="1">
					<set var="toground" value="{toground}-{Slot}"/>
					<set var="newinputs" value="{newinputs}-{Slot}"/>
				</effect>
			</case>
			<case>
				<condition>
					<if var="a_m" relation="=" value="Skip({Slot})"/>
					<if var="toground" relation="contains" value="{Slot}"/>
				</condition>
				<effect prob="1">
					<set var="toground" value="{toground}-{Slot}"/>
				</effect>
			</case>
		</rule>
		
		<!-- Updates the toground slots if a precedence relation is fullfilled -->
		<rule>
			<case>
				<condition>
					<if var="precedence" relation="contains" value="({X1},{X2})"/>
					<if var="a_m" relation="=" value="(Ground|Skip)({X1}*" />
					<if var="toground" relation="!contains" value="{X1}"/>
					<if var="toground" relation="!contains" value="{X2}"/>
				</condition>
				<effect prob="1">
					<set var="toground" value="{toground}+{X2}"/>
				</effect>
			</case>
		</rule>
		
		<!-- Updates the toground slots in case of mutual exclusivity between two slots -->
		<rule>
			<case>
				<condition>
					<if var="exclusive" relation="contains" value="({X1},{X2})"/>
					<if var="a_m" relation="=" value="(Ground|Skip)(({X1}|{X2})*" />
					<if var="toground" relation="!contains" value="({X1}|{X2})"/>
				</condition>
				<effect prob="1">
					<set var="toground" value="{toground}-{X1}-{X2}"/>
				</effect>
			</case>
		</rule>

		<!-- Updates the toground slot when (re)starting the dialogue -->
		<rule> 
			<case>
				<condition>
					<if var="a_m" relation="=" value="Start"/>
					<if var="toground" relation="=" value="None"/>
					<if var="slot" relation="in" value="{Slots}"/>
					<if var="precedence" relation="!contains" value="(*,{Slot})"/>
				</condition>
				<effect>
					<set var="toground" value="{Slot}" exclusive="false"/>
				</effect>
			</case>
		</rule>
		<rule> 
			<case>
				<condition>
					<if var="a_m" relation="=" value="Start"/>
				</condition>
				<effect>
					<set var="{Slot}" value="None"/>
				</effect>
			</case>
		</rule>

		<!-- Write the current slot 'in focus' in a variable FocusSlot -->
		<rule>
			<case>
				<condition operator="or">
					<if var="a_m" relation="=" value="Ask({Slot})"/>	
					<if var="a_m" relation="=" value="AskOpt({Slot})"/>
				</condition>
				<effect prob="1">
					<set var="FocusSlot" value="{Slot}"/>
				</effect>
			</case>
		</rule>

	</model> 
	
	
	<!-- If a new slot is grounded, asks a new question, or present the results -->
	<model trigger="toground">

		<rule id="nextquestion">

			<case>
				<condition>
					<if var="Slot" relation="in" value="{toground}" />
					<if var="optional" relation="contains" value="{Slot}"/>
				</condition>
				<effect util="1">
					<set var="a_m" value="AskOpt({Slot})" />
				</effect>
			</case>
			<case>
				<condition>
					<if var="Slot" relation="in" value="{toground}" />
				</condition>
				<effect util="1">
					<set var="a_m" value="Ask({Slot})" />
				</effect>
			</case>
		</rule> 
	
		<rule>
			<case>
				<!--If everything is grounded, present all results (return control to caller) -->
				<condition>
					<if var="toground" relation="=" value="[]" />
				</condition>
				<effect util="1">
					<set var="a_m" value="SummariseResults" />
				</effect>
			</case>
	
		</rule>
	</model>
	
	 
 	<settings>
		<modules>opendial.plugins.NLULuis</modules>
		<key_luis>ee81a5dae9cd44ebbfb8a682acbacd0a</key_luis>
		<model_luis>fb1cb71a-07c4-4f8b-bb0a-61369e90f4ec</model_luis>
	</settings> 

<!-- 	<settings>
		<modules>opendial.plugins.NLUWatson</modules>
		<model_watson>nlp-next-hotel/understandHotel</model_watson>
	</settings>  -->

</domain>